**C++ Code Examples**

As a content writer with expertise in C++ programming, I can provide you with a range of code examples and explanations to help illustrate key concepts and best practices in C++ development.

### Example 1: Hello World

A simple "Hello World" program in C++:

```cpp
#include <iostream>

int main() {
    std::cout << "Hello, World!" << std::endl;
    return 0;
}
```

**Explanation:**

*   The `#include <iostream>` directive includes the iostream header file, which provides input/output functionality.
*   The `int main()` function is the entry point of the program.
*   The `std::cout` statement displays the string "Hello, World!" to the console.
*   The `std::endl` statement is used to insert a newline and flush the output buffer.
*   The `return 0` statement indicates successful program execution.

### Example 2: Variables and Data Types

Declaring and using variables of different data types in C++:

```cpp
#include <iostream>

int main() {
    int numInt = 10;    // integer variable
    float numFloat = 3.14;  // floating-point variable
    char c = 'A';       // character variable
    bool flag = true;    // boolean variable

    std::cout << "Integer: " << numInt << std::endl;
    std::cout << "Floating-point: " << numFloat << std::endl;
    std::cout << "Character: " << c << std::endl;
    std::cout << "Boolean: " << flag << std::endl;

    return 0;
}
```

**Explanation:**

*   The `int`, `float`, `char`, and `bool` keywords are used to declare variables of different data types.
*   The `numInt`, `numFloat`, `c`, and `flag` variables are assigned values of the corresponding data types.
*   The `std::cout` statements display the values of the variables.

### Example 3: Conditional Statements

Using if-else and switch statements for conditional execution in C++:

```cpp
#include <iostream>

int main() {
    int num = 5;

    // if-else statement
    if (num > 10) {
        std::cout << "Number is greater than 10" << std::endl;
    } else {
        std::cout << "Number is less than or equal to 10" << std::endl;
    }

    // switch statement
    switch (num) {
        case 1:
            std::cout << "Number is 1" << std::endl;
            break;
        case 5:
            std::cout << "Number is 5" << std::endl;
            break;
        default:
            std::cout << "Number is not 1 or 5" << std::endl;
            break;
    }

    return 0;
}
```

**Explanation:**

*   The if-else statement checks the condition `num > 10` and executes the corresponding block of code.
*   The switch statement uses the `num` variable as a selector and executes the corresponding case block of code based on the value of `num`.

These examples demonstrate basic C++ programming concepts, including variables, data types, conditional statements, and control flow. By mastering these fundamental concepts, developers can build more complex and efficient C++ programs.