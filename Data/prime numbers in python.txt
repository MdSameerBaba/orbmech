Here's a comprehensive guide to prime numbers in Python:

**What are Prime Numbers?**

A prime number is a positive integer that is divisible only by itself and 1. For example, 2, 3, 5, and 7 are prime numbers, as they can only be divided evenly by 1 and themselves.

**How to Check if a Number is Prime in Python**

You can use the following function to check if a number is prime:
```python
def is_prime(n):
    if n <= 1:
        return False
    for i in range(2, int(n ** 0.5) + 1):
        if n % i == 0:
            return False
    return True
```
Here's an explanation of the code:

1. If the input `n` is less than or equal to 1, it's not prime, so we return `False`.
2. We iterate from 2 to the square root of `n` (inclusive), using the `range` function.
3. For each `i` in the range, we check if `n` is divisible by `i` using the modulo operator (`%`). If it is, `n` is not prime, so we return `False`.
4. If we reach the end of the loop without finding a divisor, `n` is prime, so we return `True`.

**Example Usage**
```python
print(is_prime(25))  # False
print(is_prime(23))  # True
print(is_prime(37))  # True
```
**Finding Prime Numbers**

To find all prime numbers up to a given number `n`, you can use the following function:
```python
def find_primes(n):
    primes = []
    for i in range(2, n + 1):
        if is_prime(i):
            primes.append(i)
    return primes
```
This function uses the `is_prime` function we defined earlier to check each number in the range `[2, n]` and append the prime numbers to the `primes` list.

**Example Usage**
```python
print(find_primes(20))  # [2, 3, 5, 7, 11, 13, 17, 19]
```
**Optimizations**

For larger values of `n`, the `find_primes` function can be slow due to the nested loop structure. To improve performance, you can use the following optimizations:

1. Use a more efficient primality test, such as the Miller-Rabin primality test.
2. Use a sieve algorithm, such as the Sieve of Eratosthenes, to find prime numbers.
3. Use a parallel processing library, such as `multiprocessing` or `concurrent.futures`, to speed up the computation.

I hope this helps! Let me know if you have any questions or need further assistance.