Here is a simple C++ program that checks whether a number is prime or not:

```cpp
#include<iostream>
using namespace std;

bool isPrime(int num) {
    if (num <= 1)
        return false;
    for (int i = 2; i <= num / 2; i++) {
        if (num % i == 0)
            return false;
    }
    return true;
}

int main() {
    int num;
    cout << "Enter a number: ";
    cin >> num;

    if (isPrime(num))
        cout << num << " is a prime number.";
    else
        cout << num << " is not a prime number.";

    return 0;
}
```

In this program, the function `isPrime()` checks whether a number is prime or not. This function returns `true` if the number is prime and `false` if the number is not prime.

In the `main()` function, the user is asked to enter a number. Then, the program checks whether the number is prime or not by calling the `isPrime()` function. If the number is prime, the program prints that the number is prime. Otherwise, it prints that the number is not prime.

The program does not include code for generating all prime numbers up to a certain limit, which is a different task. If you need that, you might want to look into algorithms like the Sieve of Eratosthenes or the Sieve of Sundaram.

Here is the code for generating all prime numbers up to a certain limit using the Sieve of Eratosthenes:

```cpp
#include<iostream>
#include<vector>
using namespace std;

vector<int> sieveOfEratosthenes(int n) {
    vector<bool> prime(n + 1, true);
    prime[0] = prime[1] = false;

    for (int i = 2; i * i <= n; i++) {
        if (prime[i]) {
            for (int j = i * i; j <= n; j += i) {
                prime[j] = false;
            }
        }
    }

    vector<int> primeNumbers;
    for (int i = 2; i <= n; i++) {
        if (prime[i])
            primeNumbers.push_back(i);
    }

    return primeNumbers;
}

int main() {
    int n;
    cout << "Enter a number: ";
    cin >> n;

    vector<int> primeNumbers = sieveOfEratosthenes(n);
    cout << "Prime numbers up to " << n << " are: ";
    for (int i = 0; i < primeNumbers.size(); i++) {
        cout << primeNumbers[i] << " ";
    }

    return 0;
}
```

This program generates all prime numbers up to a certain limit using the Sieve of Eratosthenes algorithm.