[
  {
    "id": "mcq_001",
    "question": "What is the time complexity of searching in a balanced binary search tree?",
    "category": "TREES",
    "difficulty": "MEDIUM",
    "options": [
      {
        "id": "a",
        "text": "O(1)",
        "is_correct": false,
        "explanation": null
      },
      {
        "id": "b", 
        "text": "O(log n)",
        "is_correct": true,
        "explanation": "In a balanced BST, the height is O(log n), making search operations O(log n)"
      },
      {
        "id": "c",
        "text": "O(n)",
        "is_correct": false,
        "explanation": null
      },
      {
        "id": "d",
        "text": "O(n log n)",
        "is_correct": false,
        "explanation": null
      }
    ],
    "explanation": "In a balanced binary search tree, the height is logarithmic, allowing search operations to run in O(log n) time by eliminating half the search space at each step.",
    "companies": ["Google", "Microsoft", "Amazon", "Facebook"],
    "tags": ["trees", "complexity", "data-structures"]
  },
  {
    "id": "mcq_002",
    "question": "Which data structure is best suited for implementing a LRU (Least Recently Used) cache with O(1) operations?",
    "category": "HASH_TABLE",
    "difficulty": "HARD",
    "options": [
      {
        "id": "a",
        "text": "Array",
        "is_correct": false,
        "explanation": "Arrays don't provide O(1) deletion from middle"
      },
      {
        "id": "b",
        "text": "Linked List",
        "is_correct": false,
        "explanation": "Linked list alone doesn't provide O(1) access by key"
      },
      {
        "id": "c",
        "text": "Hash Map",
        "is_correct": false,
        "explanation": "Hash map alone doesn't maintain order efficiently"
      },
      {
        "id": "d",
        "text": "Hash Map + Doubly Linked List",
        "is_correct": true,
        "explanation": "Hash map provides O(1) access, doubly linked list provides O(1) insertion/removal at both ends"
      }
    ],
    "explanation": "LRU cache requires O(1) access (hash map) and O(1) insertion/removal at both ends (doubly linked list). The combination provides optimal performance for all LRU operations.",
    "companies": ["Google", "Facebook", "Amazon", "Microsoft"],
    "tags": ["hash-table", "linked-list", "design", "cache"]
  },
  {
    "id": "mcq_003",
    "question": "What is the main advantage of using a hash table over an array for storing key-value pairs?",
    "category": "HASH_TABLE",
    "difficulty": "EASY",
    "options": [
      {
        "id": "a",
        "text": "Hash tables use less memory",
        "is_correct": false,
        "explanation": null
      },
      {
        "id": "b",
        "text": "Hash tables provide O(1) average lookup time",
        "is_correct": true,
        "explanation": "Hash tables provide constant time lookup on average through hashing"
      },
      {
        "id": "c",
        "text": "Hash tables maintain sorted order",
        "is_correct": false,
        "explanation": null
      },
      {
        "id": "d",
        "text": "Hash tables are always faster than arrays",
        "is_correct": false,
        "explanation": null
      }
    ],
    "explanation": "Hash tables provide O(1) average time complexity for lookups, insertions, and deletions through the use of hash functions, making them ideal for key-value storage.",
    "companies": ["Google", "Amazon", "Microsoft"],
    "tags": ["hash-table", "data-structures", "complexity"]
  },
  {
    "id": "mcq_004",
    "question": "In object-oriented programming, what does polymorphism allow you to do?",
    "category": "PROGRAMMING_LANGUAGES",
    "difficulty": "MEDIUM",
    "options": [
      {
        "id": "a",
        "text": "Create multiple classes with the same name",
        "is_correct": false,
        "explanation": null
      },
      {
        "id": "b",
        "text": "Use a single interface to represent different data types",
        "is_correct": true,
        "explanation": "Polymorphism allows objects of different types to be treated as instances of the same type through a common interface"
      },
      {
        "id": "c",
        "text": "Inherit from multiple parent classes",
        "is_correct": false,
        "explanation": null
      },
      {
        "id": "d",
        "text": "Access private variables from outside the class",
        "is_correct": false,
        "explanation": null
      }
    ],
    "explanation": "Polymorphism enables a single interface to be used for different underlying data types, allowing objects of different classes to be treated uniformly.",
    "companies": ["Google", "Microsoft", "Amazon", "Oracle"],
    "tags": ["oop", "polymorphism", "programming-concepts"]
  },
  {
    "id": "mcq_005",
    "question": "What is the primary purpose of database indexing?",
    "category": "DATABASE",
    "difficulty": "MEDIUM", 
    "options": [
      {
        "id": "a",
        "text": "To reduce storage space",
        "is_correct": false,
        "explanation": null
      },
      {
        "id": "b",
        "text": "To improve query performance",
        "is_correct": true,
        "explanation": "Indexes create efficient access paths to data, significantly speeding up query execution"
      },
      {
        "id": "c",
        "text": "To enforce data integrity",
        "is_correct": false,
        "explanation": null
      },
      {
        "id": "d",
        "text": "To backup data automatically",
        "is_correct": false,
        "explanation": null
      }
    ],
    "explanation": "Database indexes create efficient access paths to data, allowing the database engine to quickly locate specific rows without scanning entire tables.",
    "companies": ["Google", "Amazon", "Microsoft", "Oracle"],
    "tags": ["database", "indexing", "performance"]
  },
  {
    "id": "mcq_006",
    "question": "Which HTTP status code indicates that a resource was successfully created?",
    "category": "WEB_DEVELOPMENT",
    "difficulty": "EASY",
    "options": [
      {
        "id": "a",
        "text": "200 OK",
        "is_correct": false,
        "explanation": "200 OK indicates successful request but not specifically creation"
      },
      {
        "id": "b",
        "text": "201 Created",
        "is_correct": true,
        "explanation": "201 Created specifically indicates successful resource creation"
      },
      {
        "id": "c",
        "text": "204 No Content",
        "is_correct": false,
        "explanation": "204 indicates successful request with no content to return"
      },
      {
        "id": "d",
        "text": "202 Accepted",
        "is_correct": false,
        "explanation": "202 indicates request accepted but not necessarily completed"
      }
    ],
    "explanation": "HTTP 201 Created is the standard response code indicating that a request has succeeded and has led to the creation of a resource.",
    "companies": ["Google", "Amazon", "Microsoft", "Facebook"],
    "tags": ["http", "web-development", "rest-api"]
  },
  {
    "id": "mcq_007",
    "question": "What is the main difference between TCP and UDP protocols?",
    "category": "NETWORKING",
    "difficulty": "MEDIUM",
    "options": [
      {
        "id": "a",
        "text": "TCP is faster than UDP",
        "is_correct": false,
        "explanation": null
      },
      {
        "id": "b",
        "text": "TCP is connection-oriented, UDP is connectionless",
        "is_correct": true,
        "explanation": "TCP establishes connections and ensures reliable delivery, while UDP is connectionless and faster but less reliable"
      },
      {
        "id": "c",
        "text": "TCP uses IP addresses, UDP uses port numbers",
        "is_correct": false,
        "explanation": null
      },
      {
        "id": "d",
        "text": "TCP is for web traffic, UDP is for email",
        "is_correct": false,
        "explanation": null
      }
    ],
    "explanation": "TCP is connection-oriented and provides reliable, ordered delivery of data, while UDP is connectionless and prioritizes speed over reliability.",
    "companies": ["Google", "Amazon", "Microsoft", "Cisco"],
    "tags": ["networking", "protocols", "tcp", "udp"]
  },
  {
    "id": "mcq_008",
    "question": "In a relational database, what does ACID stand for?",
    "category": "DATABASE",
    "difficulty": "MEDIUM",
    "options": [
      {
        "id": "a",
        "text": "Access, Control, Integration, Data",
        "is_correct": false,
        "explanation": null
      },
      {
        "id": "b",
        "text": "Atomicity, Consistency, Isolation, Durability",
        "is_correct": true,
        "explanation": "ACID properties ensure reliable database transactions"
      },
      {
        "id": "c",
        "text": "Authentication, Certification, Identity, Database",
        "is_correct": false,
        "explanation": null
      },
      {
        "id": "d",
        "text": "Availability, Consistency, Integrity, Distribution",
        "is_correct": false,
        "explanation": null
      }
    ],
    "explanation": "ACID properties (Atomicity, Consistency, Isolation, Durability) are fundamental principles that ensure reliable processing of database transactions.",
    "companies": ["Google", "Amazon", "Microsoft", "Oracle"],
    "tags": ["database", "acid", "transactions", "reliability"]
  },
  {
    "id": "mcq_009",
    "question": "What is the space complexity of the merge sort algorithm?",
    "category": "SORTING_SEARCHING",
    "difficulty": "MEDIUM",
    "options": [
      {
        "id": "a",
        "text": "O(1)",
        "is_correct": false,
        "explanation": null
      },
      {
        "id": "b",
        "text": "O(log n)",
        "is_correct": false,
        "explanation": null
      },
      {
        "id": "c",
        "text": "O(n)",
        "is_correct": true,
        "explanation": "Merge sort requires O(n) additional space for merging subarrays"
      },
      {
        "id": "d",
        "text": "O(n log n)",
        "is_correct": false,
        "explanation": null
      }
    ],
    "explanation": "Merge sort requires O(n) additional space to store the temporary arrays used during the merging process.",
    "companies": ["Google", "Amazon", "Microsoft"],
    "tags": ["sorting", "algorithms", "space-complexity", "merge-sort"]
  },
  {
    "id": "mcq_010",
    "question": "Which design pattern is used to ensure a class has only one instance?",
    "category": "SOFTWARE_ENGINEERING",
    "difficulty": "EASY",
    "options": [
      {
        "id": "a",
        "text": "Factory Pattern",
        "is_correct": false,
        "explanation": null
      },
      {
        "id": "b",
        "text": "Observer Pattern",
        "is_correct": false,
        "explanation": null
      },
      {
        "id": "c",
        "text": "Singleton Pattern",
        "is_correct": true,
        "explanation": "Singleton pattern ensures a class has only one instance and provides global access to it"
      },
      {
        "id": "d",
        "text": "Strategy Pattern",
        "is_correct": false,
        "explanation": null
      }
    ],
    "explanation": "The Singleton pattern restricts instantiation of a class to one single instance and provides a global access point to that instance.",
    "companies": ["Google", "Amazon", "Microsoft", "Adobe"],
    "tags": ["design-patterns", "singleton", "software-engineering"]
  },
  {
    "id": "mcq_011",
    "question": "What is the primary benefit of using microservices architecture?",
    "category": "SOFTWARE_ENGINEERING",
    "difficulty": "HARD",
    "options": [
      {
        "id": "a",
        "text": "Reduced development time",
        "is_correct": false,
        "explanation": null
      },
      {
        "id": "b",
        "text": "Better scalability and maintainability",
        "is_correct": true,
        "explanation": "Microservices allow independent scaling and deployment of different components"
      },
      {
        "id": "c",
        "text": "Lower infrastructure costs",
        "is_correct": false,
        "explanation": null
      },
      {
        "id": "d",
        "text": "Simpler debugging process",
        "is_correct": false,
        "explanation": null
      }
    ],
    "explanation": "Microservices architecture enables independent scaling, deployment, and development of different services, improving overall system scalability and maintainability.",
    "companies": ["Google", "Amazon", "Microsoft", "Netflix"],
    "tags": ["microservices", "architecture", "scalability", "software-engineering"]
  },
  {
    "id": "mcq_012",
    "question": "In JavaScript, what is the difference between '==' and '===' operators?",
    "category": "PROGRAMMING_LANGUAGES",
    "difficulty": "MEDIUM",
    "options": [
      {
        "id": "a",
        "text": "No difference, they work the same",
        "is_correct": false,
        "explanation": null
      },
      {
        "id": "b",
        "text": "'==' compares values with type coercion, '===' compares values and types",
        "is_correct": true,
        "explanation": "'==' performs type conversion if needed, '===' requires both value and type to match"
      },
      {
        "id": "c",
        "text": "'==' is for numbers, '===' is for strings",
        "is_correct": false,
        "explanation": null
      },
      {
        "id": "d",
        "text": "'==' is assignment, '===' is comparison",
        "is_correct": false,
        "explanation": null
      }
    ],
    "explanation": "The '==' operator performs type coercion and compares values, while '===' (strict equality) compares both value and type without coercion.",
    "companies": ["Google", "Facebook", "Microsoft", "Amazon"],
    "tags": ["javascript", "operators", "type-coercion", "programming-languages"]
  },
  {
    "id": "mcq_013",
    "question": "What is the purpose of a load balancer in a distributed system?",
    "category": "CLOUD_COMPUTING",
    "difficulty": "MEDIUM",
    "options": [
      {
        "id": "a",
        "text": "To encrypt data transmission",
        "is_correct": false,
        "explanation": null
      },
      {
        "id": "b",
        "text": "To distribute incoming requests across multiple servers",
        "is_correct": true,
        "explanation": "Load balancers distribute network traffic across multiple servers to ensure no single server is overwhelmed"
      },
      {
        "id": "c",
        "text": "To backup data automatically",
        "is_correct": false,
        "explanation": null
      },
      {
        "id": "d",
        "text": "To monitor system performance",
        "is_correct": false,
        "explanation": null
      }
    ],
    "explanation": "A load balancer distributes incoming network traffic across multiple servers to ensure high availability and prevent any single server from becoming overwhelmed.",
    "companies": ["Google", "Amazon", "Microsoft", "Netflix"],
    "tags": ["load-balancing", "distributed-systems", "scalability", "cloud-computing"]
  },
  {
    "id": "mcq_014",
    "question": "Which SQL JOIN returns all rows from both tables, filling with NULL where no match exists?",
    "category": "DATABASE",
    "difficulty": "MEDIUM",
    "options": [
      {
        "id": "a",
        "text": "INNER JOIN",
        "is_correct": false,
        "explanation": "INNER JOIN only returns matching rows"
      },
      {
        "id": "b",
        "text": "LEFT JOIN",
        "is_correct": false,
        "explanation": "LEFT JOIN returns all rows from left table, matched rows from right"
      },
      {
        "id": "c",
        "text": "RIGHT JOIN",
        "is_correct": false,
        "explanation": "RIGHT JOIN returns all rows from right table, matched rows from left"
      },
      {
        "id": "d",
        "text": "FULL OUTER JOIN",
        "is_correct": true,
        "explanation": "FULL OUTER JOIN returns all rows from both tables, with NULLs where no match exists"
      }
    ],
    "explanation": "FULL OUTER JOIN combines LEFT and RIGHT JOINs, returning all rows from both tables and filling with NULL values where no match exists.",
    "companies": ["Google", "Amazon", "Microsoft", "Oracle"],
    "tags": ["sql", "joins", "database", "queries"]
  },
  {
    "id": "mcq_015",
    "question": "What is the main purpose of the virtual memory system in operating systems?",
    "category": "OPERATING_SYSTEMS",
    "difficulty": "HARD",
    "options": [
      {
        "id": "a",
        "text": "To increase CPU speed",
        "is_correct": false,
        "explanation": null
      },
      {
        "id": "b",
        "text": "To provide memory isolation and enable larger address spaces",
        "is_correct": true,
        "explanation": "Virtual memory provides process isolation and allows programs to use more memory than physically available"
      },
      {
        "id": "c",
        "text": "To compress data in memory",
        "is_correct": false,
        "explanation": null
      },
      {
        "id": "d",
        "text": "To synchronize threads",
        "is_correct": false,
        "explanation": null
      }
    ],
    "explanation": "Virtual memory provides process isolation, enables larger address spaces than physical memory, and allows efficient memory management through paging and swapping.",
    "companies": ["Google", "Microsoft", "Intel", "AMD"],
    "tags": ["operating-systems", "virtual-memory", "memory-management", "system-programming"]
  }
]