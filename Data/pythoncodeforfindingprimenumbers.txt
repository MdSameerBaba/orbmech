**Finding Prime Numbers in Python**
=====================================

In this section, we will explore a Python code snippet that efficiently identifies prime numbers. A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself.

**Code**
--------

```python
def is_prime(n):
    """
    Checks if a number is prime.

    Args:
    n (int): The number to check.

    Returns:
    bool: True if the number is prime, False otherwise.
    """
    if n <= 1:
        return False
    if n == 2:
        return True
    if n % 2 == 0:
        return False
    max_divisor = int(n**0.5) + 1
    for d in range(3, max_divisor, 2):
        if n % d == 0:
            return False
    return True

def find_primes(n):
    """
    Finds all prime numbers up to a specified limit.

    Args:
    n (int): The upper limit.

    Returns:
    list: A list of prime numbers up to the specified limit.
    """
    primes = []
    for possiblePrime in range(2, n + 1):
        if is_prime(possiblePrime):
            primes.append(possiblePrime)
    return primes

# Example usage
limit = 50
primes = find_primes(limit)
print(f"Prime numbers up to {limit}: {primes}")
```

**Explanation**
---------------

The provided code consists of two functions:

1.  `is_prime(n)`: This function checks if a given number `n` is prime. It leverages several optimizations to improve performance:
    *   If `n` is less than or equal to 1, it is not prime.
    *   If `n` is 2, it is prime.
    *   If `n` is even (i.e., `n % 2 == 0`), it is not prime (except for 2, which is handled separately).
    *   For odd numbers, it only checks divisibility up to the square root of `n` (`max_divisor`), as any factor larger than that would have a corresponding factor smaller than the square root.
2.  `find_primes(n)`: This function finds all prime numbers up to a specified limit `n`. It iterates over numbers from 2 to `n` (inclusive) and checks if each number is prime using the `is_prime` function. If a number is prime, it is added to the list of primes.

**Example Use Case**
--------------------

To find all prime numbers up to 50, you can use the following code:

```python
limit = 50
primes = find_primes(limit)
print(f"Prime numbers up to {limit}: {primes}")
```

This will output the list of prime numbers up to 50.

**Time Complexity**
-------------------

The time complexity of the `find_primes` function is O(n sqrt(n)), where n is the specified limit. The `is_prime` function has a time complexity of O(sqrt(n)) for each number checked. However, since the number of prime numbers is relatively small compared to the total number of numbers, the overall time complexity remains O(n sqrt(n)).